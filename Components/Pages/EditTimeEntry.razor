@page "/edit-time-entry"
@page "/edit-time-entry/{id:int}"
@inject ClientTimeEntryService clientTimeEntryService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@{
    string pageTitle = Id.HasValue ? "Editar entrada de tiempo" : "Crear nueva entrada de tiempo";
}

<div class="container mt-4">
    <h2 class="mb-4 text-center">@pageTitle</h2>

    <EditForm Model="timeEntry" OnSubmit="HandleSubmit" FormName="editTimeEntry">
        <div class="row">
            <!-- Input para los minutos -->
            <div class="col-md-6 mb-3">
                <label for="minutes" class="form-label">Minutos</label>
                <InputNumber id="minutes" @bind-Value="timeEntry.Minutes" class="form-control" placeholder="Ingrese los minutos" />
            </div>

            <!-- Input para la categoría -->
            <div class="col-md-6 mb-3">
                <label for="category" class="form-label">Categoría</label>
                <InputSelect id="category" @bind-Value="timeEntry.Category" class="form-control">
                    @foreach (var category in Enum.GetValues(typeof(Category)).Cast<Category>())
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="text-center">
            <!-- Botón para crear o editar -->
            <button type="submit" class="btn btn-primary mb-2">
                @if (Id.HasValue)
                {
                    <span>Actualizar</span>
                }
                else
                {
                    <span>Crear</span>
                }
            </button>

            @if (Id != null)
            {
                <!-- Botón para eliminar si estamos editando -->
                <button @onclick="DeleteTimeEntry" type="button" class="btn btn-danger mb-2 ms-2">
                    Eliminar
                </button>
            }
        </div>
    </EditForm>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }
    [SupplyParameterFromForm]
    TimeEntry timeEntry { get; set; } = new TimeEntry{Minutes = 0, Category = 0, DateTime = DateTime.UtcNow };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            timeEntry = await clientTimeEntryService.GetTimeEntry(Id.Value);
        }
    }



    async Task HandleSubmit()
    {
        try
        {
            if (Id.HasValue)
            {
                await clientTimeEntryService.EditTimeEntry(Id.Value, timeEntry);
            }
            else
            {
                await clientTimeEntryService.AddTimeEntry(timeEntry);
            }
            NavigationManager.NavigateTo("/list");
        }
        catch (HttpRequestException ex)
        {
            // Manejar el error de la solicitud
            Console.WriteLine(ex.Message);
        }
    }


    async Task DeleteTimeEntry()
    {
        if(Id.HasValue)
        {
            bool isDeleted = await clientTimeEntryService.DeleteTimeEntry(timeEntry.Id);

            if(isDeleted)
            {
                NavigationManager.NavigateTo("/list");
            }
        }
    }

}
