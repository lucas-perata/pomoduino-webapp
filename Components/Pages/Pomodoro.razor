@page "/pomodoro"
@using System.Timers
@inject HttpClient _httpClient
@rendermode InteractiveServer
@inject ClientTimeEntryService ClientTimeEntryService

<PageTitle>Pomodoro</PageTitle>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 text-center">
            <h3 class="mb-4">Pomodoro</h3>
            <div class="mb-3">
                <h3 class="display-1">@formattedTime</h3>
                <p class="lead">@((isFocusTime ? "Focus Time" : "Break Time"))</p>
            </div>

            <div class="mb-4">
                <button class="btn btn-primary btn-lg mx-2" @onclick="() => StartPomodoro(1,1)">25/5</button>
                <button class="btn btn-primary btn-lg mx-2" @onclick="() => StartPomodoro(35, 10)">35/10</button>
                <button class="btn btn-primary btn-lg mx-2" @onclick="() => StartPomodoro(50, 10)">50/10</button>
            </div>

            <div class="mb-4">
                <label for="category" class="form-label">Seleccionar categoría:</label>
                <select id="category" class="form-select" @bind="selectedCategory">
                    @foreach (var category in Enum.GetValues<Category>())
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div class="mb-4">
                <button class="btn btn-success btn-lg mx-2" @onclick="ToggleTimer">@(!isRunning ? "Comenzar" : "Pausar")</button>
                <button class="btn btn-danger btn-lg mx-2" @onclick="ResetTimer">Resetear</button>
            </div>
        </div>
    </div>

    <div class="card visually-hidden">
        <div class="card-header">
            <button @onclick=@(()=>hidden=!hidden)>@(!hidden ? "Play" : "Stop")</button>

        </div>
        <div class="card-body visually-hidden">
            @if (hidden)
            {
                <audio autoplay controls><source src="/alarm.mp3" /></audio>
            }
        </div>
    </div>

</div>

@code {
    private Timer _timer;
    private int remainingTime;
    private int focusTime;
    private int breakTime;
    private bool isFocusTime = true;
    private bool isBreakTime = false;
    private bool isRunning = false;
    private string formattedTime => $"{remainingTime / 60:D2}:{remainingTime % 60:D2}";
    private Category selectedCategory = Category.Estudio;
    bool hidden = false;
    private bool hasSentTimeEntry = false;
    private bool isProcessing = false;

    private void StartPomodoro(int focusMinutes, int breakMinutes)
    {
        _timer?.Stop();
        _timer?.Dispose();

        focusTime = focusMinutes;
        breakTime = breakMinutes;

        isFocusTime = true;
        remainingTime = focusMinutes * 60;
        isRunning = false;

        if (_timer == null)
        {
            _timer = new Timer(1000);
            _timer.Elapsed += OnTimerElapsed;
        }

        StateHasChanged();
    }

    private void ToggleTimer()
    {
        if (isRunning)
        {
            _timer?.Stop();
            isRunning = false;
        }
        else
        {
            if (_timer == null)
            {
                _timer = new Timer(1000);
                _timer.Elapsed += OnTimerElapsed;
            }

            _timer.Start();
            isRunning = true;
        }
    }

    private void ResetTimer()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;

        if (focusTime > 0)
        {
            remainingTime = focusTime * 60;
            isFocusTime = true;
        }

        isRunning = false;
        StateHasChanged();
    }

    private async void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (remainingTime > 0)
        {
            remainingTime--;
            hidden = false; 
        }
        else
        {
            if (isFocusTime)
            {
                if (!hasSentTimeEntry && !isProcessing)
                {
                    hidden = true; 
                    isProcessing = true;
                    var response = await AddTimeEntryToServer();
                    if (response != null)
                    {
                        hasSentTimeEntry = true;
                        remainingTime = breakTime * 60;
                    }

                    isProcessing = false;
                }

                isFocusTime = false;
                isBreakTime = true;
            }
            else if (isBreakTime)
            {
                hidden = true; 
                isBreakTime = false; 
                isFocusTime = true;
                remainingTime = focusTime * 60;
                hasSentTimeEntry = false;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task<TimeEntry> AddTimeEntryToServer()
    {
        var timeEntry = new TimeEntry
            {
                Minutes = focusTime,
                Category = selectedCategory,
                DateTime = DateTime.UtcNow
            };

        return await ClientTimeEntryService.AddTimeEntry(timeEntry);
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }
}