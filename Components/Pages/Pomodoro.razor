@page "/pomodoro"
@using System.Timers
@inject HttpClient _httpClient
@rendermode InteractiveServer
@inject ClientTimeEntryService ClientTimeEntryService

<h3>Pomodoro</h3>
<div>
    <h1>@formattedTime</h1>
    <p>@(isFocusTime ? "Focus Time" : "Break Time")</p>
</div>
<div>
    <button @onclick="() => StartPomodoro(25,5)">25/5</button>
    <button @onclick="() => StartPomodoro(35, 10)">35/10</button>
    <button @onclick="() => StartPomodoro(50, 10)">50/10</button>
</div>
<div>
    <label for="category">Select Category:</label>
    <select id="category" @bind="selectedCategory">
        @foreach (var category in Enum.GetValues<Category>())
        {
            <option value="@category">@category</option>
        }
    </select>
</div>
<div>
    <button @onclick="ToggleTimer">@(!isRunning ? "Start" : "Pause")</button>
    <button @onclick="ResetTimer">Reset</button>
</div>

@code {
    private Timer _timer;
    private int remainingTime; // Remaining time in seconds
    private int focusTime; // Focus time duration in minutes
    private int breakTime; // Break time duration in minutes
    private bool isFocusTime = true; // True if focus session, false for break
    private bool isRunning = false; // Timer running state
    private string formattedTime => $"{remainingTime / 60:D2}:{remainingTime % 60:D2}";
    private Category selectedCategory = Category.Study; // Default category

    private void StartPomodoro(int focusMinutes, int breakMinutes)
    {
        // Stop and dispose of any existing timer
        _timer?.Stop();
        _timer?.Dispose();

        // Set focus and break times
        focusTime = focusMinutes;
        breakTime = breakMinutes;

        // Initialize with focus time
        isFocusTime = true;
        remainingTime = focusMinutes * 60;
        isRunning = false;

        StateHasChanged();
    }

    private void ToggleTimer()
    {
        if (isRunning)
        {
            _timer?.Stop();
            isRunning = false;
        }
        else
        {
            // Create a new timer if not already running
            if (_timer == null)
            {
                _timer = new Timer(1000); // Tick every second
                _timer.Elapsed += OnTimerElapsed;
            }

            _timer.Start();
            isRunning = true;
        }
    }

    private void ResetTimer()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;

        // Reset to initial focus time
        if (focusTime > 0)
        {
            remainingTime = focusTime * 60;
            isFocusTime = true;
        }

        isRunning = false;
        StateHasChanged();
    }

    private async void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        if (remainingTime > 0)
        {
            remainingTime--;
        }
        else
        {
            // Switch between focus and break time
            if (isFocusTime)
            {
                // End of focus time - add time entry
                await AddTimeEntryToServer();

                // Switch to break time
                isFocusTime = false;
                remainingTime = breakTime * 60;
            }
            else
            {
                // End of break time - switch back to focus
                isFocusTime = true;
                remainingTime = focusTime * 60;
            }
        }

        // Update UI safely from timer thread
        await InvokeAsync(StateHasChanged);
    }

    private async Task AddTimeEntryToServer()
    {
        var timeEntry = new TimeEntry
            {
                Minutes = focusTime, // Use the full focus time duration
                Category = selectedCategory,
                DateTime = DateTime.UtcNow
            };

        try
        {
            var response = await ClientTimeEntryService.AddTimeEntry(timeEntry);
        }
        catch (Exception ex)
        {
            // Optional: Add error handling or logging
            Console.WriteLine($"Failed to add time entry: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }
}