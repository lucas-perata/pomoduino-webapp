@page "/list"
@inject ITimeEntryService TimeEntryService 
@inject ClientTimeEntryService ClientTimeEntryService 
@rendermode InteractiveServer

<PageTitle>Entradas de tiempo</PageTitle>


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h3 class="mb-4">Tiempo registrado para el @DateTime.UtcNow.Date</h3>
            <h3>Tiempo total @DailyTime()</h3>

            @if (timeEntries == null)
            {
                <span class="text-muted">Loading...</span>
            }
            else if (timeEntries.Count() == 0)
            {
                <div class="alert alert-warning">No hay ninguna entrada</div>
            }
            else
            {
                <ul class="list-group">
                    @foreach (TimeEntry timeEntry in timeEntries)
                    {
                        <li class="list-group-item">
                            <div>
                                <strong>@timeEntry.DateTime</strong><br>
                                <span class="text-muted">Categoría: @timeEntry.Category</span><br>
                                <span>Duración: @timeEntry.Minutes min</span><br>
                                <span>ID: @timeEntry.Id</span>
                            </div>
                            <div class="mt-2">
                                <button class="btn btn-danger" @onclick="() => DeleteTimeEntry(timeEntry.Id)">Eliminar</button>
                                <TimerApp.Components.Shared.EditTimeEntryButton Id="@timeEntry.Id" />
                            </div>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    List<TimeEntry>? timeEntries = null;
    int contador = 0;

    protected override async Task OnInitializedAsync()
    {
        timeEntries = await ClientTimeEntryService.GetDailyTimeEntries();
    }

    async Task DeleteTimeEntry(int id)
    {
        bool isDeleted = await ClientTimeEntryService.DeleteTimeEntry(id);

        if (isDeleted)
        {
            timeEntries = await ClientTimeEntryService.GetDailyTimeEntries();
        }
    }

    private int DailyTime()
    {
        if(timeEntries != null)
        {
            foreach(TimeEntry t in timeEntries)
            {
                contador += t.Minutes; 
            }
            return contador; 
        }

        return 0;
    }
}
